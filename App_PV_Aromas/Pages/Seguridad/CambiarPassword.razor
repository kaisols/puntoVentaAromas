@layout MainLayout
@page "/Seguridad/CambiarPassword"
@using System.Text.RegularExpressions
@inject SweetAlertService Swal;
@inject NavigationManager NavigationManager
@inject IServicioApi HTTP
@inject IAuthenticationService Auth
@attribute [Authorize] 

<style>
    body {
        background: #f4f6f9;
    }

    .emp-profile {
        padding: 3%;
        margin-top: 3%;
        margin-bottom: 3%;
        border-radius: 0.5rem;
        background: #fff;
        max-width: 550px;
    }

    .profile-head h3 {
        color: #0062cc;
    }

</style>




<div class="container emp-profile">
    <div>
        <div class="row">
            <div class="col-md-12">
                <div class="profile-head">
                    <h3 class="text-center">
                        Cambiar Contraseña
                    </h3>

                </div>
            </div>
        </div>


        <div class="row">
            <div class="col 12">

                <div class="form-group">
                    <label for="formGroupExampleInput">Contraseña Actual</label>
                    <input type="@TipoCampo" class="form-control" id="txt_P_Actual" placeholder="Contraseña Actual" @onblur="passActualBlur" @bind-value="passActual">
                    <p class="text-danger">@passActualError</p>
                </div>

                <div class="form-group">
                    <label for="formGroupExampleInput2">Nueva Contraseña</label>
                    <input type="@TipoCampo" class="form-control" id="txt_P_Nueva" placeholder="Contraseña Nueva" @onblur="passNuevoBlur" @bind-value="passNuevo">
                    <p class="text-danger">@passNuevoError</p>
                </div>

                <div class="form-group">
                    <label for="formGroupExampleInput2">Repita la Nueva Contraseña</label>
                    <input type="@TipoCampo" class="form-control" id="txt_P_Repite" placeholder="Repita la Nueva Contraseña" @onblur="passRepetirBlur" @bind-value="passRepetir">
                    <p class="text-danger">@passNuevoRepetirError</p>
                </div>


                <div class="form-group">
                    <input type="checkbox" @onclick="showPassword"> Mostrar Contraseñas
                </div>

                <div class="form-group">
                    <button class="btn btn-info btn-lg btn-block mt-2" @onclick="Actualizar"> Cambiar Contraseña  <i class="fas fa-key"></i></button>
                </div>


            </div>
        </div>



    </div>
</div>


    @if (loading)
{

    <Modal Title="Cargando"
       Text="Espere por Favor"
       DialogType="Components.Modal.ModalDialogType.loading">
    </Modal>
}




@code
{

    #region ================= VARIABLES DE CONTROL ======================
    public bool onTask { get; set; }
    public bool loading { get; set; }
    public string TipoCampo { get; set; } = "password";
    #endregion

    public String passActualError = "";
    public String passNuevoError = "";
    public String passNuevoRepetirError = "";

    public String passActual = "";
    public String passNuevo = "";
    public String passRepetir = "";

    public Models.Usuario miUsuario { get; set; } = new Models.Usuario();


    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            await CargarUsuario();
    }

    private async Task CargarUsuario()
    {
        try
        {
            Models.Usuario usuario = await Auth.GetUser();
            clsUtilitarios.miUsuarioLogueado = usuario;
            this.miUsuario = usuario;
            StateHasChanged();
        }
        catch (Exception ex)
        {
        }
    }

    private void passActualBlur()
    {
        if (!String.IsNullOrEmpty(passActual))
        {
            if (clsUtilitarios.encodePassword(passActual) != miUsuario.password)
            {
                passActualError = "La Contraseña Actual no coincide con la escrita.";
            }
            else
            {
                passActualError = "";
            }
        }
    }

    private void passNuevoBlur()
    {
        if (!string.IsNullOrEmpty(passNuevo))
        {
            if (!validarPassword(passNuevo.Trim()))
            {
                passNuevoError = "La contraseña debe tener Mínimo ocho caracteres, al menos una letra mayúscula, una letra minúscula, un número y un caracter especial";
            }
            else
            {
                if (!String.IsNullOrEmpty(passRepetir))
                {
                    if (!passNuevo.Equals(passRepetir))
                    {
                        passNuevoError = "Las contraseñas No coinciden";
                    }
                }
                else
                {
                    passNuevoError = "";
                }
            }
        }
        else
            passNuevoError = "Debe Escribir la Contraseña";
    }

    private void passRepetirBlur()
    {
        if (!string.IsNullOrEmpty(passRepetir))
        {

            if (!passNuevo.Equals(passRepetir))
            {
                passNuevoRepetirError = "Las contraseñas No coinciden";
            }

            if (!validarPassword(passRepetir.Trim()))
            {
                passNuevoRepetirError = "La contraseña debe tener Mínimo ocho caracteres, al menos una letra mayúscula, una letra minúscula, un número y un caracter especial";
            }
            else
            {
                if (!passNuevo.Equals(passRepetir))
                {
                    passNuevoRepetirError = "Las contraseñas No coinciden";
                }
                else
                {
                    passNuevoRepetirError = "";
                }
            }
        }
        else
            passNuevoRepetirError = "Debe Escribir la Contraseña";
    }

    public void showPassword()
    {
        if (TipoCampo.Equals("password"))
            TipoCampo = "text";
        else
            TipoCampo = "password";
    }


    bool validarPassword(string texto)
    {
        Regex reg = new Regex("^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$");

        bool respuesta = reg.IsMatch(texto);
        return respuesta;
    }

    bool ValidarCampos()
    {
        if (String.IsNullOrEmpty(this.passActual))
        { 
            passActualError = "Escriba La Contrasña Actual.";
            return false;
        } 

        if (String.IsNullOrEmpty(this.passNuevo))
        { 
            passNuevoError = "Escriba La Contrasña Nueva.";
            return false;
        } 

        if (String.IsNullOrEmpty(this.passRepetir))
        { 
            passNuevoRepetirError = "Repita la contrasña Nueva.";
            return false;
        } 


        return true;
    }

    public async Task Actualizar()
    {
        try
        {
            if (ValidarCampos())
            {
                if (onTask)
                    return;

                onTask = true;


                SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Alerta",
                        Text = "¿Esta Seguro de Realizar esta Acción?",
                        Icon = SweetAlertIcon.Question,
                        ShowCancelButton = true,
                        ConfirmButtonText = "Si, Guardar",
                        CancelButtonText = "No"
                    });


                if (result.IsConfirmed)
                {

                    Models.Usuario obj = clsUtilitarios.miUsuarioLogueado;
                    obj.tipoconsulta = 2;
                    obj.password = clsUtilitarios.encodePassword(passNuevo);
                    obj.miAuditoria = new Auditoria
                            {
                                id_usuario = obj.id,
                                movimiento = $"Se realizó un cambio de contraseña al Usuario {obj.ToString()}", 
                                accion = (int)Acciones_Auditoria.Cambio_Password, 
                            };


                        loading = true; 
                        Respuesta respuesta = await HTTP.PostAsync<Models.Usuario>("Usuario", "Guardar", obj, true);


                        if (respuesta.resultado)
                        { 
                            loading = false;
                            onTask = false;
                            StateHasChanged();
                            await Swal.FireAsync(new SweetAlertOptions
                                {
                                    Title = "Exito",
                                    Text = respuesta.mensaje,
                                    Icon = SweetAlertIcon.Success,
                                    Position = SweetAlertPosition.Center,
                                    Timer = 1500,
                                    Backdrop = true,
                                });

                           await Auth.Logout();
                           NavigationManager.NavigateTo("Seguridad/login");
                        }
                        else
                        {
                            loading = false;
                            onTask = false;
                            StateHasChanged();
                            await Swal.FireAsync(new SweetAlertOptions
                                {
                                    Title = "Error",
                                    Text = respuesta.mensaje,
                                    Icon = SweetAlertIcon.Error,
                                Position = SweetAlertPosition.Center,
                                    Timer = 1500,
                                    Backdrop = true,
                                });

                        }
                    

                }
                else
                {
                    loading = false;
                    onTask = false;
                }
            }
        }
        catch (Exception ex)
        {
            loading = false;
            onTask = false;
            await Swal.FireAsync(new SweetAlertOptions
                                {
                                    Title = "Error",
                                    Text = ex.Message,
                                    Icon = SweetAlertIcon.Success,
                                    Position = SweetAlertPosition.Center,
                                    Timer = 1500,
                                    Backdrop = true,
                                });
        }
    }


}
