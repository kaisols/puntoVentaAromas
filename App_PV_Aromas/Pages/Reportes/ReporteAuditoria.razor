@page "/Reporte/Auditoria"
@using Radzen.Blazor.GridExportOptions
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal;
@inject IAuthenticationService Auth
@attribute [Authorize]
@inject IServicioApi HTTP


<PageTitle>Reporte de Auditoria</PageTitle>

<div class="container-fluid w-100">
    <div class="row">
        <div class="col-md-12">

            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-12 col-lg-10 col-sm-12 col-xl-12">
                        <div class="card">
                            <h3 class="card-header text-center">Reporte de Auditoria</h3>
                            <div class="card-body"> 

                                <div class="form-group mt-2 row">
                                    <div class="col-sm-12 col-md-3">
                                        <label for="formGroupExampleInput">Fecha Inicio</label>
                                        <RadzenDatePicker @bind-Value=@FechaInicio Name="RadzenDatePickerBindValue" ShowCalendarWeek /> 
                                    </div>

                                    <div class="col-sm-12 col-md-3">
                                        <label for="formGroupExampleInput2">Fecha Fin</label> 
                                        <RadzenDatePicker @bind-Value=@FechaFin Name="RadzenDatePickerBindValue" ShowCalendarWeek />
                                    </div>

                                    <div class="col-sm-12 col-md-4">
                                        <button class="btn btn-primary btn-lg btn-block w-100 mt-2" @onclick=Cargar>Generar Reporte</button>
                                    </div>

                                </div>
                                 

                            </div>
                        </div>
                    </div>

                    
                </div>
            </div>


            <div class="mt-3 p-2 mb-2">
                <RadzenGridExportOptions Grid="@grid"
                                         ExcelTitle="Descargar en Excel"
                                         CSVTitle="Descargar en CSV"
                                         CSVButtonStyle="ButtonStyle.Secondary"
                                         ExcelButtonStyle="ButtonStyle.Success" />
            </div>


            <div class="mb-3">
                <RadzenDataGrid @ref="grid"
                                AllowColumnPicking="true"
                                EmptyText="SIN DATOS." GridLines="DataGridGridLines.Both"
                                AllowFiltering="true" AllowColumnResize=true
                                AllowPaging="false"  Responsive=true
                                FilterMode="FilterMode.Simple"
                                AllowSorting="true" Data="@Datos">
                    <Columns>
                        <RadzenDataGridColumn Property="tipoMovimiento" Title="Descripción" />
                        <RadzenDataGridColumn Property="fecha" Title="Fecha" FormatString="{0:d}" Width="60"/>
                        <RadzenDataGridColumn Property="Usuario" Title="Usuario" />
                        <RadzenDataGridColumn Property="Accion" Title="Acción"/>
                    </Columns>
                </RadzenDataGrid>
            </div>
           
        </div>
    </div>
</div>



 @if (loading)
{

    <Loading Title="Cargando"
             Text="Espere por Favor"
             DialogType="Loading.ModalDialogType.loading">
    </Loading>
}


@code {
    RadzenDataGrid<Models.ReporteAuditoria> grid;
    private List<Models.ReporteAuditoria> Datos = new List<Models.ReporteAuditoria>();
    public bool onTask { get; set; }
    public bool loading { get; set; }
     

    public DateOnly FechaInicio { get; set; } = DateOnly.FromDateTime(DateTime.Now);
    public DateOnly FechaFin { get; set; } = DateOnly.FromDateTime(DateTime.Now);
    public int IdCliente { get; set; } = 0;

    protected override async void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            await CargarUsuario(); 
        }

    }
    private async Task CargarUsuario()
    {
        try
        {
            Usuario usuario = await Auth.GetUser();
            clsUtilitarios.miUsuarioLogueado = usuario; 

            StateHasChanged();
        }
        catch (Exception ex)
        {
        }
    }




    private async Task Cargar()
    {
        try
        {
            loading = true;
            StateHasChanged();
             

            ReporteBase obj = new ReporteBase { 
                tipoConsulta = (IdCliente > 0) ? 2 : 1, 
                estado1 = true, 
                    Fecha_Inicio = this.FechaInicio.ToDateTime(TimeOnly.MinValue),
                    Fecha_Fin = this.FechaFin.ToDateTime(TimeOnly.MinValue),
                id = IdCliente
            };

            Respuesta respuesta = await HTTP.PostAsync<ReporteBase>("Reportes", "ReporteAuditoria", obj, true);

            if (respuesta.resultado)
            {
                Datos = JsonConvert.DeserializeObject<List<Models.ReporteAuditoria>>(respuesta.objeto.ToString(), clsUtilitarios.Json_Settings);

            }
            else
            {
                await Swal.FireAsync("Alerta", respuesta.mensaje, SweetAlertIcon.Error);
                Datos = new List<Models.ReporteAuditoria>();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Alerta", "Ha ocurrido un error al Realizar la acción", SweetAlertIcon.Error);
        }

        loading = false;
        StateHasChanged();
    }

    
 
}
