@page "/EntradaInventario"
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal;
@inject IAuthenticationService Auth
@attribute [Authorize]
@inject IServicioApi HTTP


<PageTitle>Entradas de inventario</PageTitle>

<div class="container-fluid w-100">
    <div class="row">
        <div class="col-md-12">

            <h3>Gestión de Entradas de Inventario</h3>

            <button class="btn btn-primary mb-4 text-white" @onclick="Agregar"> <i class="fas fa-plus"></i> Agregar </button>

            <Grid TItem="Models.Entradainventario"
                  Class="table table-hover table-bordered bg-white w-100"
                  Data="Datos"
                  AllowFiltering="true"
                  AllowPaging="true"
                  PageSize="10"
                  EmptyText="Sin Datos"
                  AllowSorting="true"
                  AllowSelection="false"
                  SelectionMode="GridSelectionMode.Single"
                  Responsive="true">


                <GridColumn TItem="Models.Entradainventario" HeaderText="Codigo" PropertyName="id" SortKeySelector="item => item.id">
                    @context.id
                </GridColumn>

                <GridColumn TItem="Models.Entradainventario" HeaderText="Proveedor" PropertyName="miProveedor.nombre" SortKeySelector="item => item.miProveedor.nombre">
                    @context.miProveedor.nombre
                </GridColumn>

                <GridColumn TItem="Models.Entradainventario" HeaderText="Registrado por" PropertyName="miUsuario.nombre" SortKeySelector="item => item.miUsuario.nombre">
                    @context.miUsuario.ToString()
                </GridColumn>

                
                <GridColumn TItem="Models.Entradainventario" HeaderText="Fecha" PropertyName="fecha_registro" Filterable=false SortKeySelector="item => item.fecha_registro.ToShortDateString()">
                    @context.fecha_registro.ToShortDateString()
                </GridColumn>

             

                <GridColumn TItem="Models.Entradainventario" PropertyName="edit" Filterable="false" Sortable="false">
                    <HeaderContent>

                    </HeaderContent>
                    <ChildContent>
                        <Button Class="btn btn-warning" @onclick="() => Ver(context)" TooltipTitle="Ver"><i class="far fa-eye"></i></Button> 
                    </ChildContent>
                </GridColumn>


            </Grid>
        </div>
    </div>
</div>


 @if (loading)
{

    <Loading Title="Cargando"
             Text="Espere por Favor"
             DialogType="Loading.ModalDialogType.loading">
    </Loading>
}

@code {
    private List<Models.Entradainventario> Datos = new List<Models.Entradainventario>();
    public bool onTask { get; set; }
    public bool loading { get; set; }

    protected override async void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            await CargarUsuario();
            await Cargar();
        }

    }
    private async Task CargarUsuario()
    {
        try
        {
            Usuario usuario = await Auth.GetUser();
            clsUtilitarios.miUsuarioLogueado = usuario;

            StateHasChanged();
        }
        catch (Exception ex)
        {
        }
    }




    private async Task Cargar()
    {
        try
        {
            loading = true;
            StateHasChanged();

            Models.Productos obj = new Models.Productos { tipoconsulta = 1, estado = true };

            Respuesta respuesta = await HTTP.PostAsync<Models.Productos>("EntradaInventario", "Listar", obj, true);

            if (respuesta.resultado)
            {
                Datos = JsonConvert.DeserializeObject<List<Models.Entradainventario>>(respuesta.objeto.ToString(), clsUtilitarios.Json_Settings);

            }
            else
            {
                await Swal.FireAsync("Alerta", respuesta.mensaje, SweetAlertIcon.Error);
                Datos = new List<Models.Entradainventario>();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Alerta", "Ha ocurrido un error al Realizar la acción", SweetAlertIcon.Error);
        }

        loading = false;
        StateHasChanged();
    }

    async Task Agregar()
    {
        NavigationManager.NavigateTo("EntradaInventario/Mantenimiento/");
    }


    async Task Ver(Models.Entradainventario Entrada)
    {
        if (Entrada != null)
        {
            NavigationManager.NavigateTo($"EntradaInventario/VerEntrada/{clsUtilitarios.Base64Encode(Entrada.id.ToString())}");
        }
    }

 
}
