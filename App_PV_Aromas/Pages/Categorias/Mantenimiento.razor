@page "/Categorias/Mantenimiento/"
@page "/Categorias/Mantenimiento/{EncodeID}"
@inject SweetAlertService Swal;
@inject NavigationManager NavigationManager
@inject IServicioApi HTTP
@inject IAuthenticationService Auth
@attribute [Authorize]


<PageTitle>Mantenimiennto de Categorias</PageTitle>


<div class="container-fluid p-0">
    <div class="row">

        <div class="col-md-12 col-lg-1 col-xl-1 col-sm-0"></div>
        <div class="col-md-12 col-lg-10 col-sm-12 col-xl-8">

            <div class="card shadow-lg mb-5 bg-white rounded">

                <div class="card-header bg-white">
                    <h4 class="text-center"> @HEADER</h4>
                </div>

                <div class="card-body p-3">

                    <div class="form-group row mb-1"> 
                        <div class="col-12">
                            <div class="form-group ">
                                <label for="txtNombre">Nombre</label>
                                <input type="text" class="form-control" id="txtNombre" @bind-value="_Nombre">
                            </div>
                        </div>
                    </div>

                  

                    <div class="form-group mt-5">
                        <div class="row">
                            <div class="col-md-6">
                                <button class="btn btn-primary btn-lg btn-block w-100 mt-2" @onclick=Guardar>Finalizar</button>
                            </div>
                            <div class="col-md-6">
                                <button class="btn btn-warning btn-lg btn-block w-100 mt-2" @onclick=Cancelar>Cancelar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="col-md-12 col-sm-0 col-lg-1 col-xl-2"></div>



    </div>


</div>

@if (loading)
{

    <Modal TooltipTitle="Cargando"
           Text="Espere por Favor"
           DialogType="Componentes.Modal.ModalDialogType.loading">
    </Modal>
}


<style>
    .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border-width: 0;
    }

    .input-label {
        padding: 20px;
        background-color: #FFF;
        color: #000;
        box-shadow: 5px 5px 5px 5px #CACACA;
        border-radius: 10px;
        cursor: pointer;
    }
</style>



@code {

    #region ============================= DATOS DE LA PAGINA ==============================
    public string HEADER { get; set; }
    public bool onTask { get; set; }
    public bool loading { get; set; }

    [Parameter]
    public string EncodeID { get; set; }
    #endregion ============================= DATOS DE LA PAGINA ==============================





    #region ======================= DATOS =======================
    public int ID { get; set; }
    public String _Nombre = "";  

    public Categoria _Categoria { get; set; } = new Categoria();
    #endregion ======================= DATOS =======================







    protected override async Task OnParametersSetAsync()
    {
        if (!String.IsNullOrEmpty(EncodeID))
        {
            this.ID = Convert.ToInt32(clsUtilitarios.Base64Decode(EncodeID));
        }
        else
        {
            this.ID = 0;
        }


        if (ID > 0)
        {
            await Obtener();
            HEADER = $"Editar Categoria: {ID}";
        }
        else
        {
            HEADER = "Nuevo Categoria";
        }

    }

    protected override async void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            await CargarUsuario();

        }

    }

    private async Task CargarUsuario()
    {
        try
        {
            Usuario usuario = await Auth.GetUser();
            clsUtilitarios.miUsuarioLogueado = usuario;

            StateHasChanged();
        }
        catch (Exception ex)
        {
        }
    }

    public async Task Obtener()
    {
        try
        {
            loading = true;

            Categoria obj = new Categoria { tipoconsulta = 1, estado = true, id = this.ID, };

            Respuesta respuesta = await HTTP.PostAsync<Categoria>("Categorias", "Obtener", obj, true);

            if (respuesta.resultado)
            {
                Categoria objCategoria = JsonConvert.DeserializeObject<Categoria>(respuesta.objeto.ToString(), clsUtilitarios.Json_Settings);
                _Categoria = objCategoria;
                _Nombre = objCategoria.nombre; 
            }
            else
            {
                await Swal.FireAsync("Alerta", respuesta.mensaje, SweetAlertIcon.Error);
                //StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Alerta", "Ha ocurrido un error al Realizar la acción", SweetAlertIcon.Error);
        }

        loading = false;
        StateHasChanged();
    }



    public async Task Guardar()
    {
        try
        {




            if (this._Nombre != null && this._Nombre.Length > 0
                && this._Categoria.id >= 0 
            )
            {
                loading = true;
                StateHasChanged();

                Auditoria miAuditoria = new Auditoria
                    {
                        movimiento = $@"Se {((ID > 0) ? "Actualizo" : "Guardo")} un Categoria {((ID > 0) ? "ID " + ID : "con el Nombre " + _Nombre)}.",
                        id_usuario = clsUtilitarios.getUsuarioToSave().id,
                        accion = (ID > 0) ? (int)Acciones_Auditoria.Actualizacion : (int)Acciones_Auditoria.Guardado
                    };


                _Categoria.nombre = _Nombre; 
                _Categoria.tipoconsulta = 1;
                _Categoria.miAuditoria = miAuditoria;


                Respuesta respuesta = await HTTP.PostAsync<Categoria>("Categorias", "Guardar", _Categoria, true);

                if (respuesta.resultado)
                {
                    await Swal.FireAsync("Exito", respuesta.mensaje, SweetAlertIcon.Success);


                    if (ID <= 0)
                    {
                        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "Alerta",
                                Text = "¿Desea Continuar?",
                                Icon = SweetAlertIcon.Question,
                                ShowCancelButton = true,
                                ConfirmButtonText = "Si",
                                CancelButtonText = "No"
                            });


                        if (!result.IsConfirmed)
                        {
                            Cancelar();
                        }

                        Limpiar();
                    }
                    else
                    {
                        Cancelar();
                    }



                }
                else
                {
                    await Swal.FireAsync("Alerta", respuesta.mensaje, SweetAlertIcon.Error);
                }
            }
            else
            {
                await Swal.FireAsync("Alerta", "Debe validar todos los campos.", SweetAlertIcon.Error);
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Alerta", "Ha ocurrido un error al Realizar la acción", SweetAlertIcon.Error);
        }

        loading = false;
        StateHasChanged();
    }


    void Limpiar()
    {
        _Nombre = ""; 
    }


    void Cancelar()
    {
        NavigationManager.NavigateTo("Categorias");
    }

}
