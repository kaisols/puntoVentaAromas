@page "/Productos/Mantenimiento/"
@page "/Productos/Mantenimiento/{EncodeID}"
@inject SweetAlertService Swal;
@inject NavigationManager NavigationManager
@inject IServicioApi HTTP
@inject IAuthenticationService Auth
@attribute [Authorize]


<PageTitle>Mantenimiento de Productos</PageTitle>


<div class="container-fluid p-0">
    <div class="row">

        <div class="col-md-12 col-lg-1 col-xl-1 col-sm-0"></div>
        <div class="col-md-12 col-lg-10 col-sm-12 col-xl-8">

            <div class="card shadow-lg mb-5 bg-white rounded">

                <div class="card-header bg-white">
                    <h4 class="text-center"> @HEADER</h4>
                </div>

                <div class="card-body p-3">

                    <div class="form-group row mb-1">
                        <div class="col-6">
                            <div class="form-group ">
                                <label for="txtNombre">Codigo de Barra</label>
                                <input type="text" class="form-control" id="txtNombre" @bind-value="_BarCode" disabled="@(!allowEdit)">
                            </div>
                        </div>

                        <div class="col-6">
                            <div class="form-group ">
                                <label for="txtNombre">Nombre</label>
                                <input type="text" class="form-control" id="txtNombre" @bind-value="_Nombre">
                            </div>
                        </div>
                    </div>


                    <div class="form-group row mb-3">
                        <div class="col-4">
                            <div class="form-group ">
                                <RadzenLabel Text="Seleccione el impuesto" Component="ddb_impuestos" Style="margin-right: 8px; vertical-align: middle;" />

                                <RadzenDropDown @bind-Value=@_idImpuesto Data=@listaImpuestos TextProperty="nombre" ValueProperty="id" Name="ddb_impuestos"
                                                MaxSelectedLabels="10" Multiple=false AllowClear=true
                                                AllowFiltering=false
                                                Placeholder="Seleccione el impuesto"
                                                Style="width: 100%" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-group ">
                                <RadzenLabel Text="Seleccione la Categoria" Component="ddb_Categoria" Style="margin-right: 8px; vertical-align: middle;" />

                                <RadzenDropDown @bind-Value=@_idCategoria Data=@listaCategorias TextProperty="nombre" ValueProperty="id" Name="ddb_Categoria"
                                                MaxSelectedLabels="10" Multiple=false AllowClear=true
                                                AllowFiltering=false
                                                Placeholder="Seleccione la Categoria"
                                                Style="width: 100%" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-group ">
                                <RadzenLabel Text="Seleccione la Unidad de Medida" Component="ddb_UnidadeMedida" Style="margin-right: 8px; vertical-align: middle;" />

                                <RadzenDropDown @bind-Value=@_idUnidadMedida Data=@listaUnidades TextProperty="nombre" ValueProperty="id" Name="ddb_UnidadeMedida"
                                                MaxSelectedLabels="10" Multiple=false AllowClear=true
                                                AllowFiltering=false
                                                Placeholder="Seleccione la Unidad de Medida"
                                                Style="width: 100%" />
                            </div>
                        </div>
                    </div> 


                    <div class="form-group row mb-3">
                        <div class="col-4">
                            <div class="form-group ">
                                <label for="txtNombre">Precio Compra</label>
                                <input type="text" class="form-control" id="txtNombre" @bind-value="_PrecioCompra" @onblur="utilidadBlur">
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-group ">
                                <label for="txtNombre">Precio Venta</label>
                                <input type="text" class="form-control" id="txtNombre" @bind-value="_PrecioVenta" @onblur="utilidadBlur">
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-group ">
                                <label for="txtNombre">Utilidad</label> 
                                <RadzenNumeric class="form-control" TValue="decimal" Format="#.00" @bind-Value=@_Utilidad Disabled=true InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
                            </div>
                        </div>
                    </div>


                    <div class="form-group row mb-3">
                        <div class="col-12">
                            <div class="form-group ">
                                <RadzenLabel Text="Selecciones los Proveedores" Component="ddb_grupos" Style="margin-right: 8px; vertical-align: middle;" />
                                <RadzenDropDown @bind-Value=@lista_Proveedores_Selecionados Data=@lista_Proveedores TextProperty="Nombre" ValueProperty="id" Name="ddb_grupos"
                                                MaxSelectedLabels="10" Multiple=true AllowClear=true Placeholder="Seleccione los Proveedores" Chips=true Style="width: 100%" />
                            </div>
                        </div>
                    </div>

                   



                    <div class="form-group mt-5">
                        <div class="row">
                            <div class="col-md-6">
                                <button class="btn btn-primary btn-lg btn-block w-100 mt-2" @onclick=Guardar>Finalizar</button>
                            </div>
                            <div class="col-md-6">
                                <button class="btn btn-warning btn-lg btn-block w-100 mt-2" @onclick=Cancelar>Cancelar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="col-md-12 col-sm-0 col-lg-1 col-xl-2"></div>



    </div>


</div>

@if (loading)
{

    <Modal TooltipTitle="Cargando"
           Text="Espere por Favor"
           DialogType="Componentes.Modal.ModalDialogType.loading">
    </Modal>
}


<style>
    .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border-width: 0;
    }

    .input-label {
        padding: 20px;
        background-color: #FFF;
        color: #000;
        box-shadow: 5px 5px 5px 5px #CACACA;
        border-radius: 10px;
        cursor: pointer;
    }
</style>



@code {

    #region ============================= DATOS DE LA PAGINA ==============================
    public string HEADER { get; set; }
    public bool onTask { get; set; }
    public bool loading { get; set; }

    [Parameter]
    public string EncodeID { get; set; }
    #endregion ============================= DATOS DE LA PAGINA ==============================





    #region ======================= DATOS =======================
    public int ID { get; set; }
    public String _Nombre = "";
    public String _BarCode = ""; 
    public decimal _PrecioCompra { get; set; }
    public decimal _PrecioVenta { get; set; }
    public decimal _Utilidad { get; set; } = 0;
    public decimal _stock { get; set; }
    public bool _reduceInventario { get; set; }

    public int _idCategoria { get; set; }
    public int _idImpuesto { get; set; }
    public int _idUnidadMedida { get; set; }


    public bool allowEdit { get; set; } = true;

    public Models.Productos _Producto { get; set; } = new Models.Productos();



    public List<Impuesto> listaImpuestos { get; set; } = new List<Impuesto>();
    public List<Categoria> listaCategorias { get; set; } = new List<Categoria>();
    public List<Unidadmedida> listaUnidades { get; set; } = new List<Unidadmedida>();

    #endregion ======================= DATOS =======================

    #region   ======================= DATOS PROVEEDORES =======================
    public List<Proveedor> lista_Proveedores { get; set; } = new List<Proveedor>();
    public List<int> lista_Proveedores_Selecionados { get; set; } = new List<int>();

    #endregion  ======================= DATOS PROVEEDORES =======================





    protected override async Task OnParametersSetAsync()
    {
        if (!String.IsNullOrEmpty(EncodeID))
        {
            this.ID = Convert.ToInt32(clsUtilitarios.Base64Decode(EncodeID));
        }
        else
        {
            this.ID = 0;
        }


        if (ID > 0)
        {
            await CargarUsuario();
            await Obtener();
            HEADER = $"Editar Producto: {_BarCode}";
        }
        else
        {
            HEADER = "Nuevo Producto";
        }

    }

    protected override async void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            await CargarUsuario();
            await CargarImpuestos();
            await CargarCategorias();
            await CargarProveedores();
            await CargarUnidadesMedidas();

        }

    }

    private async Task CargarUsuario()
    {
        try
        {
            Usuario usuario = await Auth.GetUser();
            clsUtilitarios.miUsuarioLogueado = usuario;

            StateHasChanged();
        }
        catch (Exception ex)
        {
        }
    }

    public async Task Obtener()
    {
        try
        {
            loading = true;

            Models.Productos obj = new Models.Productos { tipoconsulta = 1, estado = true, id = this.ID, };

            Respuesta respuesta = await HTTP.PostAsync<Models.Productos>("Productos", "Obtener", obj, true);

            if (respuesta.resultado)
            {
                Models.Productos Producto = JsonConvert.DeserializeObject<Models.Productos>(respuesta.objeto.ToString(), clsUtilitarios.Json_Settings);
                _Producto = Producto;
                _Nombre = Producto.nombre;
                _BarCode = Producto.codBarras;
                _PrecioVenta = Producto.precioVenta;
                _PrecioCompra = Producto.precioCompra;
                _Utilidad = Producto.utilidad;
                _idCategoria = Producto.miCategoria.id;
                _idUnidadMedida = Producto.miUnidadMedida.id;
                _idImpuesto = Producto.miImpuesto.id;

                if (Producto.Proveedores != null)
                {
                    lista_Proveedores_Selecionados = Producto.Proveedores.Select(grupo => grupo.id).ToList();
                }

                allowEdit = false;
            }
            else
            {
                await Swal.FireAsync("Alerta", respuesta.mensaje, SweetAlertIcon.Error);
                //StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Alerta", "Ha ocurrido un error al Realizar la acción", SweetAlertIcon.Error);
        }

        loading = false;
        StateHasChanged();
    }


    public async Task CargarImpuestos()
    {
        try
        {
            loading = true;

            Models.Impuesto obj = new Models.Impuesto { tipoconsulta = 1, estado = true };

            Respuesta respuesta = await HTTP.PostAsync<Models.Impuesto>("Impuestos", "Listar", obj, true);

            if (respuesta.resultado)
            {
                listaImpuestos = JsonConvert.DeserializeObject<List<Impuesto>>(respuesta.objeto.ToString(), clsUtilitarios.Json_Settings);

            }
            else
            {
                await Swal.FireAsync("Alerta", respuesta.mensaje, SweetAlertIcon.Error); 
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Alerta", "Ha ocurrido un error al Realizar la acción", SweetAlertIcon.Error);
        }

        loading = false;
        StateHasChanged();
    }

    public async Task CargarUnidadesMedidas()
    {
        try
        {
            loading = true;

            Models.Unidadmedida obj = new Models.Unidadmedida { tipoconsulta = 1, estado = true };

            Respuesta respuesta = await HTTP.PostAsync<Models.Unidadmedida>("UnidadMedida", "Listar", obj, true);

            if (respuesta.resultado)
            {
                listaUnidades = JsonConvert.DeserializeObject<List<Unidadmedida>>(respuesta.objeto.ToString(), clsUtilitarios.Json_Settings);

            }
            else
            {
                await Swal.FireAsync("Alerta", respuesta.mensaje, SweetAlertIcon.Error);
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Alerta", "Ha ocurrido un error al Realizar la acción", SweetAlertIcon.Error);
        }

        loading = false;
        StateHasChanged();
    }

    public async Task CargarCategorias()
    {
        try
        {
            loading = true;

            Models.Categoria obj = new Models.Categoria { tipoconsulta = 1, estado = true };

            Respuesta respuesta = await HTTP.PostAsync<Models.Categoria>("Categorias", "Listar", obj, true);

            if (respuesta.resultado)
            {
                listaCategorias = JsonConvert.DeserializeObject<List<Categoria>>(respuesta.objeto.ToString(), clsUtilitarios.Json_Settings);

            }
            else
            {
                await Swal.FireAsync("Alerta", respuesta.mensaje, SweetAlertIcon.Error);
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Alerta", "Ha ocurrido un error al Realizar la acción", SweetAlertIcon.Error);
        }

        loading = false;
        StateHasChanged();
    }

    public async Task CargarProveedores()
    {
        try
        {
            loading = true;

            Models.Proveedor obj = new Models.Proveedor { tipoconsulta = 2, estado = true };

            Respuesta respuesta = await HTTP.PostAsync<Models.Proveedor>("Proveedores", "Listar", obj, true);

            if (respuesta.resultado)
            {
                lista_Proveedores = JsonConvert.DeserializeObject<List<Proveedor>>(respuesta.objeto.ToString(), clsUtilitarios.Json_Settings);

            }
            else
            {
                await Swal.FireAsync("Alerta", respuesta.mensaje, SweetAlertIcon.Error);
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Alerta", "Ha ocurrido un error al Realizar la acción", SweetAlertIcon.Error);
        }

        loading = false;
        StateHasChanged();
    }

    public async Task Guardar()
    {
        try
        {

            if (this._Nombre != null && this._Nombre.Length > 0 &&
                this._BarCode != null && this._BarCode.Length > 0 &&
                this._PrecioVenta > 0 &&
                this._PrecioCompra >= 0 &&
                this._Utilidad > 0 &&
                this._idCategoria > 0 &&
                this._idUnidadMedida > 0 &&
                this._idImpuesto > 0
            )
            {
                loading = true;
                StateHasChanged();

                Auditoria miAuditoria = new Auditoria
                    {
                        movimiento = $@"Se {((ID > 0) ? "Actualizo" : "Guardo")} un Producto {((ID > 0) ? "ID " + ID : "con el Nombre " + _Nombre)}.",
                        id_usuario = clsUtilitarios.getUsuarioToSave().id,
                        accion = (ID > 0) ? (int)Acciones_Auditoria.Actualizacion : (int)Acciones_Auditoria.Guardado
                    };


                _Producto.nombre = _Nombre;
                _Producto.tipoconsulta = 1;
                _Producto.codBarras = _BarCode;
                _Producto.utilidad = _Utilidad;
                _Producto.precioCompra = _PrecioCompra;
                _Producto.precioVenta = _PrecioVenta;
                _Producto.stock = 0;
                _Producto.reduceInventario = _reduceInventario;
                _Producto.miUnidadMedida = new Unidadmedida { id = _idUnidadMedida };
                _Producto.miCategoria = new Categoria { id = _idCategoria };
                _Producto.miImpuesto = new Impuesto { id = _idImpuesto };
                _Producto.Proveedores = lista_Proveedores
                   .Where(grupo => lista_Proveedores_Selecionados.Contains(grupo.id)).ToList();

                _Producto.miAuditoria = miAuditoria;


                Respuesta respuesta = await HTTP.PostAsync<Models.Productos>("Productos", "Guardar", _Producto, true);

                if (respuesta.resultado)
                {
                    await Swal.FireAsync("Exito", respuesta.mensaje, SweetAlertIcon.Success);


                    if (ID <= 0)
                    {
                        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "Alerta",
                                Text = "¿Desea Continuar?",
                                Icon = SweetAlertIcon.Question,
                                ShowCancelButton = true,
                                ConfirmButtonText = "Si",
                                CancelButtonText = "No"
                            });


                        if (!result.IsConfirmed)
                        {
                            Cancelar();
                        }

                        Limpiar();
                    }
                    else
                    {
                        Cancelar();
                    }



                }
                else
                {
                    await Swal.FireAsync("Alerta", respuesta.mensaje, SweetAlertIcon.Error);
                }
            }
            else
            {
                await Swal.FireAsync("Alerta", "Debe validar todos los campos.", SweetAlertIcon.Error);
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Alerta", "Ha ocurrido un error al Realizar la acción", SweetAlertIcon.Error);
        }

        loading = false;
        StateHasChanged();
    }


    void Limpiar()
    {
        _Nombre = "";
        _BarCode = "";
        _PrecioVenta = 0;
        _PrecioCompra = 0;
        _Utilidad = 0;
        _idCategoria = 0;
        _idUnidadMedida = 0;
        _idImpuesto = 0;
        lista_Proveedores_Selecionados = new List<int>();
    }


    void Cancelar()
    {
        NavigationManager.NavigateTo("Productos");
    }


    void utilidadBlur()
    {
        loading = true;

        if (_PrecioCompra > 0 || _PrecioVenta > 0)
        {
            decimal utilidad = CalcularUtilidad(_PrecioCompra, _PrecioVenta);

            // Calcular porcentaje de utilidad
            decimal porcentajeUtilidad = CalcularPorcentajeUtilidad(utilidad, _PrecioCompra);

            _Utilidad = porcentajeUtilidad;
        }

        loading = false;
        StateHasChanged();
    }

    public static decimal CalcularUtilidad(decimal precioCompra, decimal precioVenta)
    {
        return precioVenta - precioCompra;
    }

    public static decimal CalcularPorcentajeUtilidad(decimal utilidad, decimal precioCompra)
    {
        if (precioCompra == 0)
        {
            return 100; // Devuelve 0 o algún valor que indique que no se puede calcular
        }
        return (utilidad / precioCompra) * 100;
    }
}
