@page "/Clientes"
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal;
@inject IAuthenticationService Auth
@attribute [Authorize]
@inject IServicioApi HTTP 


<PageTitle>Clientes</PageTitle>

<div class="container-fluid w-100">
    <div class="row">
        <div class="col-md-12">

            <h3>Clientes</h3>

            <button class="btn btn-primary mb-4 text-white" @onclick="Agregar"> <i class="fas fa-plus"></i> Agregar </button>

            <Grid TItem="Cliente"
                  Class="table table-hover table-bordered bg-white w-100"
                  Data="Datos"
                  AllowFiltering="true"
                  AllowPaging="true"
                  PageSize="5"
                  EmptyText="Sin Datos"
                  AllowSorting="true"
                  AllowSelection="false"
                  SelectionMode="GridSelectionMode.Single"
                  Responsive="true">

                
                <GridColumn TItem="Cliente" HeaderText="Nombre" PropertyName="nombre" SortKeySelector="item => item.nombre">
                    @context.nombre
                </GridColumn>

                <GridColumn TItem="Cliente" HeaderText="Cedula" PropertyName="cedula" SortKeySelector="item => item.cedula">
                    @context.cedula
                </GridColumn>

                <GridColumn TItem="Cliente" HeaderText="Correo" PropertyName="correo" SortKeySelector="item => item.correo">
                    @context.correo
                </GridColumn>
                <GridColumn TItem="Cliente" HeaderText="Telefono" PropertyName="telefono">
                    @context.telefono
                </GridColumn>
                <GridColumn TItem="Cliente" HeaderText="Dirección" PropertyName="direccion" SortKeySelector="item => item.direccion">
                    @context.direccion
                </GridColumn>

                <GridColumn TItem="Cliente" PropertyName="edit" Filterable="false" Sortable="false">
                    <HeaderContent>
                        
                    </HeaderContent>
                    <ChildContent>
                        <Button Class="btn btn-warning" @onclick="() => Editar(context.id)" TooltipTitle="Editar"><i class="far fa-edit"></i></Button>
                        <Button Class="btn btn-danger text-white" @onclick="() => Delete(context)" TooltipTitle="Eliminar"><i class="fas fa-trash-alt"></i></Button> 
                    </ChildContent>
                </GridColumn>

            </Grid>
        </div>
    </div>
</div>


 @if (loading)
{

    <Loading Title="Cargando"
             Text="Espere por Favor"
             DialogType="Loading.ModalDialogType.loading">
    </Loading>
}

@code {
    private List<Cliente> Datos = new List<Cliente>();
    public bool onTask { get; set; }
    public bool loading { get; set; }

    protected override async void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            await CargarUsuario();
            await Cargar();
        }

    }
    private async Task CargarUsuario()
    {
        try
        {
            Usuario usuario = await Auth.GetUser();
            clsUtilitarios.miUsuarioLogueado = usuario;

            // if (!clsUtilitarios.miUsuarioLogueado?.miRol?.permisos.Permiso_Clientes?.Acceso ?? false)
            // {
            //     NavigationManager.NavigateTo("Default/AccessDenied", true);
            // }

            StateHasChanged();
        }
        catch (Exception ex)
        {
        }
    }




    private async Task Cargar()
    { 
        try
        {
            loading = true;
            StateHasChanged();

            Cliente obj = new Cliente { tipoConsulta = 1, estado = true };

            Respuesta respuesta = await HTTP.PostAsync<Cliente>("Cliente", "Listar", obj, true);

            if (respuesta.resultado)
            {
                Datos = JsonConvert.DeserializeObject<List<Cliente>>(respuesta.objeto.ToString(), clsUtilitarios.Json_Settings);

            }
            else
            {
                await Swal.FireAsync("Alerta", respuesta.mensaje, SweetAlertIcon.Error);
                Datos = new List<Cliente>();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Alerta", "Ha ocurrido un error al Realizar la acción", SweetAlertIcon.Error);
        } 

        loading = false;
        StateHasChanged();
    }

    async Task Agregar()
    {
        // if (!clsUtilitarios.miUsuarioLogueado?.miRol?.permisos.Permiso_Clientes?.Guardar ?? false)
        // {
        //     await Swal.FireAsync("Alerta", "No posee permisos para realizar la acción.", SweetAlertIcon.Warning);
        // }
        // else
        // {
            NavigationManager.NavigateTo("Clientes/Mantenimiento/");
        // }
       
    }


    async Task Editar(int id)
    {
        // if (!clsUtilitarios.miUsuarioLogueado?.miRol?.permisos.Permiso_Clientes?.Editar ?? false)
        // {
        //     await Swal.FireAsync("Alerta", "No posee permisos para realizar la acción.", SweetAlertIcon.Warning);
        // }
        // else
        // {
        //     NavigationManager.NavigateTo($"Clientes/Mantenimiento/{clsUtilitarios.Base64Encode(id.ToString())}");
        // }

    }


    async Task Delete(Cliente cliente)
    {
        // if (!clsUtilitarios.miUsuarioLogueado?.miRol?.permisos.Permiso_Clientes?.Eliminar ?? false)
        // {
        //     await Swal.FireAsync("Alerta", "No posee permisos para realizar la acción.", SweetAlertIcon.Warning);
        // }
        // else
        // {
        //     if (cliente != null)
        //     {
        //         SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
        //             {
        //                 Title = "Alerta",
        //                 Text = $"¿Desea {((cliente.estado) ? "Desactivar" : "Activar")} este Cliente?",
        //                 Icon = SweetAlertIcon.Question,
        //                 ShowCancelButton = true,
        //                 ConfirmButtonText = "Si",
        //                 CancelButtonText = "No"
        //             });


        //         if (result.IsConfirmed)
        //         {
        //             await Eliminar(cliente); 
        //             StateHasChanged();
        //         }
        //     }
        // }

        
    }



    public async Task Eliminar(Cliente cliente)
    {
        try
        {
            Auditoria miAuditoria = new Auditoria
                {
                    movimiento = $@"Se {((cliente.estado) ? "Desactivar" : "Activar")} el cliente {cliente.nombre}.",
                    id_usuario = clsUtilitarios.getUsuarioToSave().id,
                    accion = (int)Acciones_Auditoria.Eliminacion
                };

            cliente.estado = !cliente.estado;
            cliente.tipoConsulta = 2;
            cliente.miAuditoria = miAuditoria;

            Respuesta respuesta = await HTTP.PostAsync<Cliente>("Cliente", "Guardar", cliente, true);

            if (respuesta.resultado)
            {
                await Swal.FireAsync("Exito", respuesta.mensaje, SweetAlertIcon.Success);
                await Cargar();
            }
            else
            {
                await Swal.FireAsync("Alerta", respuesta.mensaje, SweetAlertIcon.Error);
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Alerta", "Ha ocurrido un error al Realizar la acción", SweetAlertIcon.Error);
        }

        loading = false;
        StateHasChanged();
    }
}
