@page "/Usuarios/Mantenimiento/"
@page "/Usuarios/Mantenimiento/{EncodeID}"
@inject SweetAlertService Swal;
@inject NavigationManager NavigationManager
@inject IServicioApi HTTP
@inject IAuthenticationService Auth
@attribute [Authorize]


<PageTitle>Mantenimiento de Usuarios</PageTitle>


<div class="container-fluid p-0">
    <div class="row"> 

        <div class="col-md-12 col-lg-1 col-xl-1 col-sm-0"></div>
        <div class="col-md-12 col-lg-10 col-sm-12 col-xl-8">

            <div class="card shadow-lg mb-5 bg-white rounded">

                <div class="card-header bg-white">
                    <h4 class="text-center"> @HEADER</h4>
                </div>

                <div class="card-body p-3">

                    <div class="form-group row mb-1">
                        <div class="col-md-12 col-sm-12">
                            <div class="form-group ">
                                <label for="txtCedula">Cedula</label>
                                <input type="text" class="form-control" id="txtCedula" @bind-value="_Cedula" @onblur="cedulaBlur">
                            </div>
                        </div> 
                    </div>


                    <div class="form-group row mb-1"> 
                        <div class="col-md-6 col-sm-12">
                            <div class="form-group ">
                                <label for="txtNombre">Nombre</label>
                                <input type="text" class="form-control" id="txtNombre" @bind-value="_Nombre">
                            </div>
                        </div>

                        <div class="col-md-6 col-sm-12">
                            <div class="form-group ">
                                <label for="txtApellidos">Apellidos</label>
                                <input type="text" class="form-control" id="txtApellidos" @bind-value="_Apellidos">
                            </div>
                        </div>
                    </div>

                    <div class="form-group row mb-1">

                        <div class="col-4">
                            <div class="form-group ">
                                <label for="txtCorreo">Correo</label>
                                <input type="email" class="form-control" id="txtCorreo" @bind-value="_Correo">
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-group ">
                                <label for="txtTelefono">Telefono</label>
                                <input type="tel" class="form-control" id="txtTelefono" @bind-value="_Telefono">
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-group ">
                                <label for="txtUser">Usuario</label>
                                <input type="text" class="form-control" id="txtUser" @bind-value="_UserName" readonly>
                            </div>
                        </div>
                      
                    </div> 

                    <div class="form-group row mt-3">

                        <div class="col-12">
                            <RadzenLabel Text="Selecciones el Rol" Component="ddb_Rol" Style="margin-right: 8px; vertical-align: middle;" />
                           
                            <RadzenDropDown @bind-Value=@_ID_ROL Data=@lista_Roles TextProperty="Nombre" ValueProperty="id" Name="ddb_Rol"
                                            MaxSelectedLabels="10" Multiple=false AllowClear=true
                                            @bind-SearchText=SearchText2 AllowFiltering=true
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            FilterOperator="Radzen.StringFilterOperator.Contains"
                                            Placeholder="Seleccione el Rol"
                                            Style="width: 100%" />
                        </div>
                    </div>
 
                     




                    <div class="form-group mt-5">
                        <div class="row">
                            <div class="col-md-6">
                                <button class="btn btn-primary btn-lg btn-block w-100 mt-2" @onclick=Guardar>Finalizar</button>
                            </div>
                            <div class="col-md-6">
                                <button class="btn btn-warning btn-lg btn-block w-100 mt-2" @onclick=Cancelar>Cancelar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="col-md-12 col-sm-0 col-lg-1 col-xl-2"></div>



    </div>


</div>


 @if (loading)
{

    <Loading Title="Cargando"
             Text="Espere por Favor"
             DialogType="Loading.ModalDialogType.loading">
    </Loading>
}


<style>
    .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border-width: 0;
    }

    .input-label {
        padding: 20px;
        background-color: #FFF;
        color: #000;
        box-shadow: 5px 5px 5px 5px #CACACA;
        border-radius: 10px;
        cursor: pointer;
    }
</style>



@code {

    #region ============================= DATOS DE LA PAGINA ============================== 
    public string HEADER { get; set; }
    public bool onTask { get; set; }
    public bool loading { get; set; }

    [Parameter]
    public string EncodeID { get; set; }
    #endregion ============================= DATOS DE LA PAGINA ==============================





    #region ======================= DATOS =======================
    public int ID { get; set; } 
    public int _ID_ROL { get; set; } 


    private String nombre { get; set; } = "";

    public String _Nombre
    {
        get => nombre;
        set
        {
            nombre = value;
            GenerarUserName();
        }
    }

    public String apellidos { get; set; } = "";
    public String _Apellidos
    {
        get => apellidos;
        set
        {
            apellidos = value;
            GenerarUserName();
        }
    }
    public String _UserName = "";  
    public String _Password = "";  
    public String _Correo = "";   
    public String _Telefono = "";    
    public String _Cedula = "";    
    public bool _esPrincipal { get; set; }



    public Models.Usuario _Usuario { get; set; } = new Models.Usuario();
    #endregion ======================= DATOS =======================


    #region   ======================= DATOS SISTEMA ======================= 
    public List<Rol> lista_Roles { get; set; } = new List<Rol>();  
    public string SearchText2 { get; set; }
    #endregion  ======================= DATOS SISTEMA =======================





    protected override async Task OnParametersSetAsync()
    {
        if (!String.IsNullOrEmpty(EncodeID))
        {
            this.ID = Convert.ToInt32(clsUtilitarios.Base64Decode(EncodeID));
        }
        else
        {
            this.ID = 0;
        }


        if (ID > 0)
        { 
            await Obtener();
            HEADER = $"Editar Usuario : {ID}";
        }
        else
        {
            HEADER = "Nuevo Usuario";
        }

    }

    protected override async void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        { 
            await CargarUsuario();  
            await Cargar_Roles();

        }

    }

    private async Task CargarUsuario()
    {
        try
        {
            Models.Usuario usuario = await Auth.GetUser();
            clsUtilitarios.miUsuarioLogueado = usuario;


            // if (!clsUtilitarios.miUsuarioLogueado?.miRol?.permisos.Permiso_Usuario?.Acceso ?? false)
            // {
            //     NavigationManager.NavigateTo("Default/AccessDenied", true);
            // }


            StateHasChanged();
        }
        catch (Exception ex)
        {
        }
    }

    public async Task Obtener()
    {
        try
        {
            loading = true;

            Models.Usuario obj = new Models.Usuario { tipoconsulta = 1, estado = true, id = this.ID, };

            Respuesta respuesta = await HTTP.PostAsync<Models.Usuario>("Usuario", "Obtener", obj, true);

            if (respuesta.resultado)
            {
                Models.Usuario objCliente = JsonConvert.DeserializeObject<Models.Usuario>(respuesta.objeto.ToString(), clsUtilitarios.Json_Settings);
                _Usuario = objCliente;
                _Nombre = objCliente.nombre;
                _Correo = objCliente.correo;
                _Telefono= objCliente.telefono; 
                _ID_ROL = objCliente.miRol.id;
                _Cedula = objCliente.cedula;
                _Apellidos = objCliente.apellidos; 
            }
            else
            {
                await Swal.FireAsync("Alerta", respuesta.mensaje, SweetAlertIcon.Error);
                //StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Alerta", "Ha ocurrido un error al Realizar la acción", SweetAlertIcon.Error);
        }

        loading = false;
        StateHasChanged();
    }

    private async Task Cargar_Roles()
    {
        try
        {
            loading = true;
            StateHasChanged();

            Rol obj = new Rol { estado = true, tipoConsulta = 1 };

            Respuesta respuesta = await HTTP.PostAsync<Rol>("Rol", "Listar", obj, true);

            if (respuesta.resultado)
            {
                lista_Roles = JsonConvert.DeserializeObject<List<Rol>>(respuesta.objeto.ToString(), clsUtilitarios.Json_Settings);

            }
            else
            {
                await Swal.FireAsync("Alerta", respuesta.mensaje, SweetAlertIcon.Error);
                lista_Roles = new List<Rol>(); 
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Alerta", "Ha ocurrido un error al Realizar la acción", SweetAlertIcon.Error);
        }

        loading = false;
        StateHasChanged();
    }

    public async Task<bool> Validar()
    {
        bool resultado = true;

        if (this._Nombre != null && this._Nombre.Trim().Length > 0)
        { 
        }
        else
        {
            await Swal.FireAsync("Validacion de Datos", "Debes Escribir el Nombre", SweetAlertIcon.Warning);
            resultado = false;
            return resultado;
        }

        if (this._Correo != null && this._Correo.Trim().Length > 0)
        { 
        }
        else
        {
            await Swal.FireAsync("Validacion de Datos", "Debes Escribir el Correo", SweetAlertIcon.Warning);
            resultado = false;
            return resultado;
        }

        if (this._Telefono != null && this._Telefono.Trim().Length > 0)
        {
        }
        else
        {
            await Swal.FireAsync("Validacion de Datos", "Debes Escribir el Telefono", SweetAlertIcon.Warning);
            resultado = false;
            return resultado;
        }

        if (this._Cedula != null && this._Cedula.Trim().Length > 0)
        {
        }
        else
        {
            await Swal.FireAsync("Validacion de Datos", "Debes Escribir la Cedula", SweetAlertIcon.Warning);
            resultado = false;
            return resultado;
        }

        if (this._Apellidos != null && this._Apellidos.Trim().Length > 0)
        {
        }
        else
        {
            await Swal.FireAsync("Validacion de Datos", "Debes Escribir los Apellidos", SweetAlertIcon.Warning);
            resultado = false;
            return resultado;
        }

        if (this._Apellidos != null && this._Apellidos.Trim().Length > 0)
        {
        }
        else
        {
            await Swal.FireAsync("Validacion de Datos", "Debes Escribir los Apellidos", SweetAlertIcon.Warning);
            resultado = false;
            return resultado;
        }


        return resultado;

    }

    public async Task Guardar()
    {
        try
        {
            // if ((!clsUtilitarios.miUsuarioLogueado?.miRol?.permisos.Permiso_Usuario?.Guardar ?? false)
            // || (!clsUtilitarios.miUsuarioLogueado?.miRol?.permisos.Permiso_Usuario?.Editar ?? false))
            // {
            //     await Swal.FireAsync("Alerta", "No posee permisos para realizar la acción.", SweetAlertIcon.Warning);
            //     return;
            // }



            if (await Validar())
            {
                loading = true;
                StateHasChanged();

                Auditoria miAuditoria = new Auditoria
                    {
                        movimiento = $@"Se {((ID > 0) ? "Actualizo" : "Guardo")} un usuario con el UserName = {_UserName}.", 
                        id_usuario = clsUtilitarios.getUsuarioToSave().id,
                        accion = (ID > 0) ? (int)Acciones_Auditoria.Actualizacion : (int)Acciones_Auditoria.Guardado
                    };


                _Usuario.cedula = _Cedula;
                _Usuario.nombre = _Nombre;
                _Usuario.apellidos = _Apellidos;
                _Usuario.user_name = _UserName; 
                _Usuario.correo = _Correo;
                _Usuario.telefono = _Telefono;
                _Usuario.tipoconsulta = 1;
                _Usuario.password = clsUtilitarios.encodePassword("12345");
                _Usuario.miAuditoria = miAuditoria;
                _Usuario.miRol = new Rol { id = _ID_ROL }; 


                Respuesta respuesta = await HTTP.PostAsync<Models.Usuario>("Usuario", "Guardar", _Usuario, true);

                if (respuesta.resultado)
                {
                    await Swal.FireAsync("Exito", respuesta.mensaje, SweetAlertIcon.Success);


                    if (ID <= 0)
                    {
                        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "Alerta",
                                Text = "¿Desea Continuar?",
                                Icon = SweetAlertIcon.Question,
                                ShowCancelButton = true,
                                ConfirmButtonText = "Si",
                                CancelButtonText = "No"
                            });


                        if (!result.IsConfirmed)
                        {
                            Cancelar();
                        }

                        Limpiar();
                    }
                    else
                    {
                        Cancelar();
                    }



                }
                else
                {
                    await Swal.FireAsync("Alerta", respuesta.mensaje, SweetAlertIcon.Error);
                }
            }
            else
            {

            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Alerta", "Ha ocurrido un error al Realizar la acción", SweetAlertIcon.Error);
        }

        loading = false;
        StateHasChanged();
    }


    void Limpiar()
    {
        _Nombre = "";
        _Correo = "";
        _Telefono = ""; 
    }


    void Cancelar()
    {
        NavigationManager.NavigateTo("Usuarios");
    }


    async Task cedulaBlur()
    {
        loading = true;

        if(_Cedula != null && _Cedula.Trim().Length > 0)
        {
            var result = await clsUtilitarios.ConsultarUsuarioApiAsync(this._Cedula);

            if(result != null)
            {
                _Nombre = result.firstname;
                _Apellidos = result.lastname;
            }

        }

        loading = false;
        StateHasChanged();

    }


    private void GenerarUserName()
    { 
        if (!string.IsNullOrEmpty(_Nombre) && !string.IsNullOrEmpty(_Apellidos))
        {
            var firstNameInitial = _Nombre.Substring(0, 1); 
            var lastName = _Apellidos.Split(' ', StringSplitOptions.RemoveEmptyEntries)[0];  
            Random random = new Random(); 
            int randomNumber = random.Next(1, 1001);
            _UserName = $"{firstNameInitial}{lastName}{randomNumber.ToString()}".ToLower();
        }
        else
        { 
            _UserName = string.Empty;
        }
    }
}
